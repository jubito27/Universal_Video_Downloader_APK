name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache .buildozer and Gradle
      uses: actions/cache@v4
      with:
        path: |
          .buildozer
          ~/.gradle
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake libtool pkg-config m4 \
          libltdl-dev libtool-bin \
          zlib1g-dev libncurses5-dev libtinfo6 libssl-dev libffi-dev \
          git unzip openjdk-17-jdk

    - name: Symlink libtinfo5 to libtinfo6 (for backward compatibility)
      run: |
        sudo ln -s /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5 || true

        

    - name: Set up Android SDK
      run: |
        mkdir -p $HOME/android-sdk/cmdline-tools
        cd $HOME/android-sdk/cmdline-tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
        unzip commandlinetools-linux-13114758_latest.zip
        mv cmdline-tools latest
        rm commandlinetools-linux-13114758_latest.zip

        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Accept Android licenses
      run: |
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Install Android components
      run: |
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-33" \
          "platforms;android-34" \
          "build-tools;34.0.0" \
          "ndk;25.2.9519653"
        echo "$HOME/android-sdk/build-tools/34.0.0" >> $GITHUB_PATH

    - name: Fix sdkmanager path for Buildozer
      run: |
        mkdir -p $HOME/android-sdk/tools/bin
        ln -sf $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager $HOME/android-sdk/tools/bin/sdkmanager
        ln -sf $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager $HOME/android-sdk/tools/bin/avdmanager

    - name: Install Buildozer (latest)
      run: |
        pip install --upgrade pip
        pip install cython==0.29.33
        pip install git+https://github.com/kivy/buildozer.git

    - name: Update buildozer.spec paths
      run: |
        sed -i "s|^android.sdk_path = .*|android.sdk_path = $HOME/android-sdk|g" buildozer.spec
        echo "android.ndk_path = $HOME/android-sdk/ndk/25.2.9519653" >> buildozer.spec

    - name: Configure buildozer.spec
      run: |
        sed -i "s|^android.sdk_path = .*|android.sdk_path = $HOME/android-sdk|g" buildozer.spec
        sed -i "/^android.ndk_path =/d" buildozer.spec
        echo "android.ndk_path = $HOME/android-sdk/ndk/25.2.9519653" >> buildozer.spec
        sed -i "s|#p4a.branch = .*|p4a.branch = develop|g" buildozer.spec
        grep -q "^android.ndk_path" buildozer.spec || echo "android.ndk_path = $HOME/android-sdk/ndk/25.2.9519653" >> buildozer.spec

    - name: Prepare Autotools Environment
      run: |
        cd ~/.buildozer/android/platform/python-for-android  || true
        if [ -d "recipes/libffi" ]; then
          cd recipes/libffi
          libtoolize --force --copy
          autoreconf --install --force --verbose
        fi

    - name: Decode Keystore
      run: |
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Secret is empty"
            exit 1
          else
            echo "Secret is set"
          fi
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/my-release-key.jks

    - name: Build Release APK
      uses: digreatbrian/buildozer-action@v2
      with:
        python-version: 3.11
        buildozer-cmd: buildozer -v android release
    
    - name: Sign the APK manually
      run: |
        APK_PATH=$(find ./bin -name "*-release-unsigned.apk" | head -n 1)
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore android.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          "$APK_PATH" "${{ secrets.KEY_ALIAS }}"

    - name: Rename the signed APK
      run: |
        APK_PATH=$(find ./bin -name "*-release-unsigned.apk" | head -n 1)
        NEW_APK_PATH="${APK_PATH/-unsigned/-signed}"
        mv "$APK_PATH" "$NEW_APK_PATH"

          
    - name: List bin directory contents
      run: ls -l bin/
    
    - name: Move generated APK to known location (if exists)
      run: |
        if ls bin/*release-signed.apk 1> /dev/null 2>&1; then
          mv bin/*release-signed.apk app-signed.apk
        fi


    - name: Upload Signed APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: signed-release-apk
        path: ./bin/*-release-signed.apk
        

        
